# yaml-language-server: $schema=https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json

variables:
  WIN32_IMAGE: registry.gitlab.com/rpdev/docker/qt5-windows:win32
  WIN64_IMAGE: registry.gitlab.com/rpdev/docker/qt5-windows:win64
  UBUNTU_IMAGE: registry.gitlab.com/rpdev/docker/qt5-ubuntu
  ANDROID_IMAGE: registry.gitlab.com/rpdev/docker/qt5-android
  FLATPAK_IMAGE: registry.gitlab.com/rpdev/docker/flatpak-builder-kde
  SNAPCRAFT_IMAGE: registry.gitlab.com/rpdev/docker/snapcraft
  NEXTCLOUD_IMAGE: nextcloud
  OWNCLOUD_IMAGE: owncloud
  CTEST_OUTPUT_ON_FAILURE: 1
  GIT_SUBMODULE_STRATEGY: recursive
  CCACHE_DIR: $CI_PROJECT_DIR/ccache
  ANDROID_MIN_SDK_INT: 21
  OPENTODOLIST_WEBDAV_TEST_SERVERS_TEMPLATE: "nextcloud://admin:admin@nextcloud/;owncloud://admin:admin@owncloud/;generic://admin:admin@nextcloud/remote.php/webdav/;generic://admin:admin@owncloud/remote.php/webdav/"
    

stages:
  - prepare
  - build
  - test
  - installer
  - deploy
  - beta
  - candidate
  - stable

cache:
    paths:
        - $CCACHE_DIR
    key: $CI_JOB_NAME

# Run pipelines for branches and tags (https://docs.gitlab.com/ee/ci/yaml/#workflowrules-templates):
include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

# Do not run pipelines for pushes from POEditor:
workflow:
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /Update [^ ]+ \(POEditor.com\)/i
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /Downloaded Translations from POEditor/i
      when: never
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

################################################################################
# Prepare Stage
################################################################################

download_translations:
  stage: prepare
  image: fedora
  script:
    ./ci/download_translations.sh
  rules:
    - if: $OPENTODOLIST_DOWNLOAD_TRANSLATIONS == '1'
    - if: $CI_COMMIT_BRANCH == 'development'
      allow_failure: true
      when: manual


################################################################################
# Build Stage
################################################################################


# Run cppcheck static code checker:
cppcheck:
  stage: build
  image: fedora
  script:
    - ci/cppcheck.sh

# Run clang-format code formatter check:
clang-format:
  stage: build
  image: fedora # Force to F32 for now - required to get clang-format passing
  script:
    - ci/clang-format.sh

# Run cpplint static code checker:
cpplint:
  stage: build
  image: fedora
  script:
    - ci/cpplint.sh

# Create source archives of the app
export-sources:
  stage: build
  image: fedora
  script:
    - ci/export-sources.sh
  artifacts:
    paths:
      - OpenTodoList-Source-*.zip
      - OpenTodoList-Source-*.tar.gz
    expire_in: 1 week


# Ubuntu build including AppImage
appimage:
  stage: build
  image: $UBUNTU_IMAGE
  services:
    - name: $NEXTCLOUD_IMAGE
      alias: nextcloud
    - name: $OWNCLOUD_IMAGE
      alias: owncloud
  script:
    - ci/ubuntu-build.sh
  variables:
    OPENTODOLIST_WEBDAV_TEST_SERVERS: $OPENTODOLIST_WEBDAV_TEST_SERVERS_TEMPLATE
  artifacts:
    paths:
      - build-ubuntu/OpenTodoList-*-x86_64.AppImage*
    expire_in: 1 week


# Job template to build on Fedora
.fedora:
  stage: build
  image: fedora
  services:
    - name: $NEXTCLOUD_IMAGE
      alias: nextcloud
    - name: $OWNCLOUD_IMAGE
      alias: owncloud
  variables:
    OPENTODOLIST_WEBDAV_TEST_SERVERS: $OPENTODOLIST_WEBDAV_TEST_SERVERS_TEMPLATE
  script:
    ./ci/fedora-build.sh

# Build on Fedora using cmake
fedora-cmake:
  extends: .fedora

# Build on Fedora using cmake and libraries from repositories
fedora-cmake-system-libs:
  extends: .fedora
  variables:
    SYSTEM_LIBS: "1"

# Windows 32bit build
win32:
  stage: build
  image: $WIN32_IMAGE
  script:
    - ./ci/win32-build.sh
  artifacts:
    paths:
      - deploy-win32/OpenTodoList-*-Windows-32bit.exe
    expire_in: 1 week


# Windows 64bit build
win64:
  stage: build
  image: $WIN64_IMAGE
  script:
    - ./ci/win64-build.sh
  artifacts:
    paths:
      - deploy-win64/OpenTodoList-*-Windows-64bit.exe
    expire_in: 1 week


# macOS build:
macos:
  stage: build
  tags:
    - macos
  script:
    - ci/macos-build.sh
  artifacts:
    paths:
      - build-macos/app/OpenTodoList.dmg
    expire_in: 1 week
  variables:
    QT_VERSION: "5.15.2"
    OSX_DEPLOYMENT_TARGET: "10.13" # Should be set to match Qt's minimum


# iOS build:
ios:
  stage: build
  tags:
    - macos
  script:
    - ci/ios-cmake-build.sh
  artifacts:
    paths:
      - build-ios-cmake/app/OpenTodoListIpa/OpenTodoList.ipa
    expire_in: 1 week


# Template for Android builds
.android-build:
  stage: build
  image: $ANDROID_IMAGE
  script:
    - df -h
    - ci/android-cmake-build.sh
    - df -h
  artifacts:
    paths:
      - build-android/OpenTodoList*.apk
      - build-android/OpenTodoList*.aab
    expire_in: 1 week
  variables:
    ANDROID_NDK_PLATFORM: android-$ANDROID_MIN_SDK_INT

# Android build ARMv7
android_armv7:
  extends: .android-build
  variables:
    ANDROID_ABIS: armeabi-v7a

# Android build ARM64
android_arm64_v8a:
  extends: .android-build
  variables:
    ANDROID_ABIS: arm64-v8a

# Android build x86
android_x86:
  extends: .android-build
  variables:
    ANDROID_ABIS: x86

# Android build x86_64
android_x64:
  extends: .android-build
  variables:
    ANDROID_ABIS: x86_64

# Build the app as Flatpak
flatpak:
    stage: build
    image: $FLATPAK_IMAGE
    script:
        - ci/flatpak-build.sh
    artifacts:
      paths:
        - fp-repo
      expire_in: 1 week
    cache:
        paths:
            - .flatpak-builder/ccache/
        key: $CI_JOB_NAME

# Build the app as Snap
snap::build:
    stage: build
    image: $SNAPCRAFT_IMAGE
    script:
        - snapcraft snap
    artifacts:
      paths:
        - opentodolist*.snap
      expire_in: 1 week
    allow_failure: true # The Snap docker is currently broken - allow this to fail!

# Build the app for Arch Linux using pkgbuild
archlinux-pkgbuild:
    stage: build
    image: archlinux
    script:
        - ci/archlinux-pkgbuild.sh
    artifacts:
      paths:
        - build-arch/opentodolist-*.pkg.tar.zst
        - build-arch/.SRCINFO
      expire_in: 1 week
      when: always
    # Allow failure, Arch is very bleeding edge, so this should not prevent a release
    allow_failure: true


################################################################################
# Installer Stage
################################################################################

.sign_apks:
    stage: installer
    tags:
        - OpenTodoListPrivate
    image: $ANDROID_IMAGE
    script:
        - ci/sign-apks.sh
    artifacts:
      paths:
        - build-android/*-aligned.apk
        - build-android/*-aligned.aab
      expire_in: 1 week

sign::android_arm64_v8a:
  extends: .sign_apks
  needs:
    - android_arm64_v8a

sign::android_armv7:
  extends: .sign_apks
  needs:
    - android_armv7

sign::android_x64:
  extends: .sign_apks
  needs:
    - android_x64

sign::android_x86:
  extends: .sign_apks
  needs:
    - android_x86

aur_release_check:
    stage: installer
    image: fedora
    script:
        - ci/update-aur.sh
    needs:
        - archlinux-pkgbuild

################################################################################
# Deploy Stage
################################################################################


github:
    stage: deploy
    image: fedora
    script:
        - yum install -y --nogpgcheck python3 python3-requests
        - mkdir uploads
        - cp build-ubuntu/OpenTodoList-*-x86_64.AppImage uploads
        - cp deploy-win32/OpenTodoList-*-Windows-32bit.exe uploads
        - cp deploy-win64/OpenTodoList-*-Windows-64bit.exe uploads
        - cp build-android/*-aligned.apk uploads
        - cp build-macos/app/OpenTodoList.dmg uploads
        - cp OpenTodoList-Source-*.zip uploads
        - cp OpenTodoList-Source-*.tar.gz uploads
        - cp *.snap uploads || /bin/true # Snap docker image is currently broken - allow this to fail
        - ./ci/github-upload.py mhoeher opentodolist $CI_COMMIT_REF_NAME $GITHUB_ACCESS_TOKEN ./uploads/*
    rules:
      - if: $CI_COMMIT_TAG
        when: manual


appstore:
    stage: deploy
    tags:
        - macos
    when: manual
    script:
        - xcrun altool --upload-app --type ios --file build-ios-cmake/app/OpenTodoListIpa/OpenTodoList.ipa -u "$APPSTORE_USER" -p "$APPSTORE_PASSWORD"
    needs:
      - ios

aur_release:
    stage: deploy
    image: fedora
    variables:
        RELEASE_TO_AUR: 1
    script:
        - ci/update-aur.sh
    needs:
        - aur_release_check
        - archlinux-pkgbuild
    when: manual

upload_translations:
  stage: deploy
  image: fedora
  script:
    ./ci/upload_translations.sh
  rules:
    - if: $CI_COMMIT_BRANCH == 'development'
      allow_failure: true

################################################################################
# Upload to snapcraft.io
################################################################################

# Template to upload snaps:
.snap::upload:
  stage: deploy
  image: $SNAPCRAFT_IMAGE
  script:
      - echo "$SNAPCRAFT_LOGIN_DATA" > ./login.txt
      - snapcraft login "--with=./login.txt"
      - snapcraft upload opentodolist*.snap --release $SNAPCRAFT_CHANNEL
  needs:
    - snap::build
  allow_failure: true

# Upload to edge channel
snap::edge:
  extends: .snap::upload
  variables:
    SNAPCRAFT_CHANNEL: edge
